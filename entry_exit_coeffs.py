import numpy as np
from scipy.optimize import curve_fit
import matplotlib.pyplot as plt

def approximant(sigma, Re, q):
    # https://stackoverflow.com/questions/29815094/rational-function-curve-fitting-in-python
    # Approximate function as `output = p0 sigma^2 + p1 sigma + p2`
    # Approximate coefficients as `pi = qi0 Re^-2 + qi1 Re^-1 + qi2`
    if type(Re) is np.ndarray:
        assert type(sigma) is np.ndarray
        assert np.shape(Re) == np.shape(sigma)
        Re_inv = np.reciprocal(Re)
        point_count = np.shape(sigma)[0]
        p = np.zeros((point_count, 3))
        for i,qi in enumerate(q):
            p[:,i] = np.polyval(qi, Re_inv)
        out = np.zeros(point_count)
        for i,s in enumerate(sigma):
            out[i] = np.polyval(p[i,:], s)
    else:
        Re_inv = 1 / Re
        p = np.zeros(3)
        for i,qi in enumerate(q):
            p[i] = np.polyval(qi, Re_inv)
        out = np.polyval(p, sigma)
    return out

def calibrate():
    # https://apps.automeris.io/wpd/
    # K_e_turb_re_inf,,K_e_turb_re_10000,,K_e_turb_re_5000,,K_e_turb_re_3000,
    # X,Y,X,Y,X,Y,X,Y
    K_e_turb_dataset = [
        2.7755575615628914e-17,1.122439024390244,0.0006459948320413564,1.1230155210643016,2.7755575615628914e-17,1.1230155210643016,2.7755575615628914e-17,1.122439024390244,
        0.10465116279069775,1.0094456762749446,0.10206718346253238,1.0094456762749446,0.10335917312661505,1.0077161862527717,0.10335917312661505,1.00079822616408,
        0.20413436692506473,0.9102882483370289,0.20284237726098203,0.9056762749445677,0.20155038759689936,0.9004878048780489,0.20219638242894072,0.8947228381374724,
        0.3036175710594317,0.8215077605321509,0.3016795865633077,0.8088248337028825,0.30232558139534904,0.8047893569844794,0.3016795865633077,0.7967184035476722,
        0.401808785529716,0.7454101995565412,0.40374677002584003,0.7229268292682933,0.40180878552971605,0.7194678492239471,0.401808785529716,0.712549889135255,
        0.5025839793281657,0.6819955654101997,0.5006459948320416,0.6525942350332596,0.5019379844961244,0.6456762749445683,0.5025839793281657,0.6410643015521069,
        0.6020671834625326,0.628957871396896,0.6014211886304913,0.5932150776053219,0.6014211886304913,0.5891796008869182,0.6014211886304913,0.5811086474501105,
        0.700258397932817,0.5874501108647452,0.7015503875968997,0.5470953436807098,0.7009043927648582,0.5413303769401332,0.7009043927648584,0.533259423503326,
        0.8016795865633081,0.5563192904656322,0.8010335917312665,0.5136585365853662,0.8016795865633081,0.5032815964523284,0.8010335917312666,0.4957871396895789,
        0.8998708010335923,0.5361419068736144,0.9005167958656336,0.4871396895787147,0.8998708010335921,0.47906873614190704,0.8998708010335921,0.4698447893569846,
        1.0019379844961251,0.5315299334811535,1.0006459948320416,0.4721507760532151,1.001291989664083,0.464079822616408,1.001291989664083,0.4548558758314858
    ]

    # K_c_turb_re_inf,,K_c_turb_re_10000,,K_c_turb_re_5000,,K_c_turb_re_3000,
    # X,Y,X,Y,X,Y,X,Y
    K_c_turb_dataset = [
        2.0816681711721685e-17,0.7707760532150779,3.469446951953614e-17,0.8290022172949003,0.0006459948320413772,0.8399556541019957,3.469446951953614e-17,0.8491796008869181,
        0.10271317829457374,0.7494456762749445,0.10335917312661505,0.8053658536585366,0.10335917312661505,0.8174722838137473,0.10335917312661505,0.8243902439024391,
        0.20284237726098206,0.7252328159645238,0.20348837209302337,0.7811529933481154,0.20284237726098206,0.7932594235033262,0.20284237726098206,0.800177383592018,
        0.3016795865633077,0.7004434589800443,0.30232558139534904,0.7569401330376943,0.3016795865633077,0.7690465631929048,0.30297157622739035,0.7765410199556543,
        0.401808785529716,0.676230598669623,0.4024547803617573,0.732727272727273,0.4024547803617573,0.7448337028824833,0.401808785529716,0.7523281596452329,
        0.5019379844961243,0.6508647450110865,0.5012919896640831,0.7090909090909094,0.5019379844961244,0.7206208425720619,0.5019379844961244,0.7281152993348119,
        0.6014211886304913,0.6272283813747228,0.6014211886304913,0.6843015521064306,0.60077519379845,0.6952549889135258,0.6014211886304913,0.7044789356984479,
        0.7009043927648584,0.6035920177383597,0.7021963824289411,0.6600886917960088,0.7015503875968998,0.6698891352549889,0.7015503875968996,0.6802660753880272,
        0.8010335917312666,0.5793791574279378,0.8003875968992252,0.6364523281596456,0.8010335917312661,0.6462527716186249,0.8016795865633078,0.6560532150776057,
        0.9011627906976748,0.5551662971175165,0.9005167958656339,0.6122394678492238,0.9005167958656335,0.6214634146341467,0.9011627906976755,0.6318403547671837,
        1.0006459948320414,0.5309534368070953,1.001291989664083,0.5886031042128609,1.0012919896640833,0.5966740576496677,1.000645994832042,0.6082039911308207
    ]

    def approximant_curve_fit(sigma_re, q00, q01, q02, q10, q11, q12, q20, q21, q22):
        q = np.array([q00, q01, q02, q10, q11, q12, q20, q21, q22]).reshape((3,3))
        return approximant(sigma_re[:,0], sigma_re[:,1], q)

    # Note: need n_datapoints = same for both K_e and K_c
    # Same goes for n_re
    n_datapoints = 11
    n_re = 4
    n_total = n_datapoints * n_re

    K_e_turb_x = np.zeros((n_total,2))
    K_c_turb_x = np.zeros((n_total,2))
    K_e_turb_y = np.zeros(n_total)
    K_c_turb_y = np.zeros(n_total)

    Re_list = [1e10, 10000, 5000, 3000]
    for i in range(n_total):
        # Init sigmas
        K_e_turb_x[i,0] = K_e_turb_dataset[i * 2]
        K_c_turb_x[i,0] = K_c_turb_dataset[i * 2]
        # Init Reynolds numbers
        Re = Re_list[i % n_re]
        K_e_turb_x[i,1] = Re
        K_c_turb_x[i,1] = Re
        # Init Ks
        K_e_turb_y[i] = K_e_turb_dataset[i * 2 + 1]
        K_c_turb_y[i] = K_c_turb_dataset[i * 2 + 1]

    popt, pcov = curve_fit(approximant_curve_fit, K_e_turb_x, K_e_turb_y, maxfev = 20000)
    K_e_q = np.reshape(popt, (3,3))
    print(f"{K_e_q=}")

    K_e_x_coords = np.reshape(K_e_turb_x, (n_datapoints,n_re,2))[:,:,0]
    K_e_y_coords = np.reshape(K_e_turb_y, (n_datapoints,n_re))
    plt.plot(K_e_x_coords, K_e_y_coords, 'o')
    K_e_x_coords = np.linspace(0,1,100)
    K_e_y_coords = np.zeros((100,n_re))
    for i in range(n_re):
        K_e_y_coords[:,i] = approximant(K_e_x_coords, Re_list[i], K_e_q)
    plt.plot(K_e_x_coords, K_e_y_coords)
    plt.show()

    popt, pcov = curve_fit(approximant_curve_fit, K_c_turb_x, K_c_turb_y, 
                            p0=[ 2.07516878e+01, -1.56531599e+04, -6.70582809e+03,
                                -1.18603970e+03, -1.41667880e+04,  4.96209464e+03,
                                -3.48054467e+03, -9.38374244e+05, -4.40872114e+03],
                            maxfev = 20000)
    K_c_q = np.reshape(popt, (3,3))
    print(f"{K_c_q=}")

    K_c_x_coords = np.reshape(K_c_turb_x, (n_datapoints,n_re,2))[:,:,0]
    K_c_y_coords = np.reshape(K_c_turb_y, (n_datapoints,n_re))
    plt.plot(K_c_x_coords, K_c_y_coords, 'o')
    K_c_x_coords = np.linspace(0,1,1000)
    K_c_y_coords = np.zeros((1000,n_re))
    for i in range(n_re):
        K_c_y_coords[:,i] = approximant(K_c_x_coords, Re_list[i], K_c_q)
    plt.plot(K_c_x_coords, K_c_y_coords)
    plt.show()
    approximant(0, 5000, K_c_q)
    

def simple_usage():
    K_e_q = np.array([
        [-1.71982162e-05,  5.87701941e-01, -2.88255203e-05],
        [-1.98488340e-05, -1.25706593e+00,  1.63329320e-05],
        [ 5.66846358e+01, -1.00446719e+02,  5.03904167e+01],
        [-1.18427104e-02,  3.67100540e+01,  2.47203028e-01]
    ])

    sigma = 0.1
    re = 4000

    # sigma = np.array([0.1,0.2,0.3])
    # re = 4000

    # sigma = np.array([0.1,0.2,0.3])
    # re = np.array([4000, 5000, 6000])

    print(approximant(sigma, re, K_e_q))

calibrate()
